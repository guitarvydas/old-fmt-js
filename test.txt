TopLevel [x+] = ‛«x»’
ConstDeclaration [kconst ident kto expression] = ‛\nconst «ident» = «expression»;’
FunctionDeclaration [kfn ident Formals Block] = ‛\nfunction «ident» («Formals») {«Block»\n’

Formals [ident*] = ‛«ident»’

Primary_number [digit+] = ‛«digits»’
Primary_arrayliteral [karr Expressions kend] = ‛\[«Expressions»\] ’

Expression_fieldaccess [e1 op e2] = ‛«e1».«e2»’
Expression_operation [e1 op e2] = ‛«e1» «op» «e2»’
Expression_functioncall [e1 kcall Actuals* kend] = ‛«e1» («Actuals»)’
Expression_primary [Primary] = ‛«Primary»’

Operator_subtract [k] = ‛-’
Operator_add [k] = ‛+’
Operator_gt [k] = ‛ > ’

Phrase [x] = ‛«x»’

IfPhrase [kif Expression Block elsifphrase? elsephrase?] = ‛\nif («Expression») {«Block»\n«elsifphrase»«elsephrase»’
ElsifPhrase [kelse kif Expression Block] = ‛\nelse if («Expression») {«Block»\n’
ElsePhrase [kelse Block] = ‛\nelse {«Block»\n’
ReturnPhrase [kreturn Expression] = ‛\nreturn «Expression»;’

Block [kdo Phrase+ kend] = ‛«Phrase»’

FieldName [ident] = ‛«ident»’

ident [identFirst identRest*] = ‛«identFirst»«identRest»’
identFirst [c] = ‛«c»’
identRest [c] = ‛«c»’

NonemptyListOf [x xs+ cs+] = ‛«x»«xs»«cs»’
